name: CI-packages

on:
  push:
    branches:
     - main
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - '**'
    paths-ignore:
      - 'examples/**'
      - 'docs/**'

permissions:
  contents: read

jobs:
  test-packages:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 21.x]
    env:
      NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          # Fetch all git history so that yarn workspaces --since can compare with the correct commits
          # @link https://github.com/actions/checkout#fetch-all-history-for-all-tags-and-branches
          fetch-depth: 0

      - name: ⚙️ Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: 📥 Monorepo install
        uses: ./.github/actions/yarn-nm-install

      - uses: nrwl/nx-set-shas@v4
      # This line is needed for nx affected to work when CI is running on a PR
      - run: git branch --track main origin/main

      - name: Cache rotation keys
        id: cache-rotation
        shell: bash
        run: |
          echo "YEAR_MONTH=$(/bin/date -u "+%Y%m")" >> $GITHUB_OUTPUT

      - name: ♻️ Restore packages cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/.cache
          key: ${{ runner.os }}-packages-cache-${{ steps.cache-rotation.outputs.YEAR_MONTH }}-${{ hashFiles('yarn.lock') }}-${{ hashFiles('packages/**.[jt]sx?', 'integrations/**.[jt]sx?') }}
          restore-keys: |
            ${{ runner.os }}-packages-cache-${{ steps.cache-rotation.outputs.YEAR_MONTH }}-${{ hashFiles('yarn.lock') }}-

      - name: 🕵️ Typecheck
        run: yarn nx affected --target=typecheck --exclude='examples/**' --exclude='docs'

      - name: 🔬 ESLint checks
        run: yarn nx affected --target=lint --exclude='examples/**' --exclude='docs'

      - name: 🧪 Unit tests (no-coverage - node !== 20.x)
        if: matrix.node-version != '20.x'
        run: yarn nx affected --target=test-unit --exclude='examples/**' --exclude='docs'

      - name: 🧪 Unit tests (coverage - only node 20.x)
        if: matrix.node-version == '20.x'
        run: yarn nx affected --target=test-unit-coverage --exclude='examples/**' --exclude='docs'

      - name: ☂️ Codecov upload (only node-20)
        if: matrix.node-version == '20.x'
        working-directory: ${{ github.workspace }}
        run: |
          bash .github/scripts/install-codecov.sh
          yarn g:ci-coverage-upload
        shell: bash

      - name: 🧪 Unit tests (edge-runtime)
        run: yarn nx affected --target=test-unit-edge --exclude='examples/**' --exclude='docs'

      - name: 🏗 Build packages
        run: yarn nx affected --target=build --exclude='examples/**' --exclude='docs'

      - name: 📐 Check build for size-limits
        if: matrix.node-version == '20.x'
        run: yarn nx affected --target=check-size --exclude='examples/**' --exclude='docs'

      - name: 🛟 Check build for ecmascript compliance
        if: matrix.node-version == '20.x'
        run: yarn nx affected --target=check-dist --exclude='examples/**' --exclude='docs'

      - name: 🛟 Check publishable dist (arethetypeswrong)
        if: matrix.node-version == '20.x'
        run: yarn nx affected --target=check-pub --exclude='examples/**' --exclude='docs'

      - name: 📄 Check doc can be built
        run: yarn nx affected --target=docgen --exclude='examples/**' --exclude='docs'
